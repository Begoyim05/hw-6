#include <iostream>
#include <string>
using namespace std;


struct Node {
    int data;
    Node* next;
    Node(int x, Node* n = nullptr) : data(x), next(n) {}
};


class LinkedStack {
private:
    Node* head; 
    int n;       

public:
    LinkedStack() {
        head = nullptr;
        n = 0;
    }

    ~LinkedStack() {
        while (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    int size() const { return n; }
    bool empty() const { return n == 0; }

    void push(int x) {
        head = new Node(x, head);
        n++;
    }

    void pop() {
        if (empty()) {
            cout << "Stack is empty" << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
        n--;
    }

    void top() const {
        if (empty()) {
            cout << "Stack is empty" << endl;
            return;
        }
        cout << head->data << endl;
    }

    void print() const {
        if (empty()) {
            cout << "Empty" << endl;
            return;
        }
        Node* curr = head;
        while (curr != nullptr) {
            cout << curr->data;
            if (curr->next != nullptr) cout << " ";
            curr = curr->next;
        }
        cout << endl;
    }
};


int main() {
    int q;
    cin >> q;

    LinkedStack st;

    for (int i = 0; i < q; i++) {
        string cmd;
        cin >> cmd;

        if (cmd == "push") {
            int x;
            cin >> x;
            st.push(x);
        }
        else if (cmd == "pop") {
            st.pop();
        }
        else if (cmd == "top") {
            st.top();
        }
        else if (cmd == "size") {
            cout << st.size() << endl;
        }
        else if (cmd == "empty") {
            cout << (st.empty() ? "true" : "false") << endl;
        }
        else if (cmd == "print") {
            st.print();
        }
    }

    return 0;
}
